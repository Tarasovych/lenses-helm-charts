### TO DEPLOY SQL RUNNERS IN THE CLUSTER
### FROM LENSES YOU NEED TO PATCH THE SERVICE ACCOUNT 
### LENSES WILL USE TO DEPLOY. see http://lenses.stream/install_setup/configuration/sql-config.html#kubernetes

# Basic info
replicaCount: 1

image:
  repository: landoop/lenses
  tag: 2.2.8
  pullPolicy: IfNotPresent

# Monitoring
monitoring:
  pipeline: lenses
  enabled: true
  port: 9102
  path: "/metrics"

# Resource management
resources:
  limits:
    memory: 5Gi
  requests:
    memory: 4Gi

# rbacEnable indicates if a the cluster has rbac enabled and a cluster role 
# and rolebinding should be created for the service account
rbacEnable: true

# restPort is the Lenses rest port
restPort: 3030
servicePort: 80

# serviceAccount is the Service account to be used by Lenses to deploy apps
serviceAccount: default

#service 
service:
  enabled: true
  type: ClusterIP
  annotations: {}

  ## Load balancer IP address
  ## Is not required, but allows for static address with
  ## serviceType LoadBalancer.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerIP: 130.211.x.x

  ## This will restrict traffic through the cloud-provider load-balancer
  ## to the specified client IPs.
  ## If not supported by cloud provider, this field is ignored.
  ## Default: nil
  ##
  # loadBalancerSourceRanges:
  #   - 0.0.0.0/0
  
ingress:
  ## If true, Ingress will be created
  ##
  enabled: true
  host: 
  path:

  # Ingress annotations
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.frontend.rule.type: PathPrefixStrip
#    kubernetes.io/ingress.class: nginx
#    kubernetes.io/tls-acme: 'true'
#    nginx.ingress.kubernetes.io/rewrite-target: /

  # TLS if enabled load the tls.crt and tls.keys as a secrets and enable TLS on the ingress
  tls:
    enabled: false 
    crt: |-
    key: |-

lenses:
  jvm:
    # heapOpts are any overrides for Lenses Heap JVM options
    heapOpts: |-
    # logBackOpts are any logging options
    logBackOpts:
    #performanceOpts are any jvm tuning options to add to the jvm
    performanceOpts:

  # broker details. 
  ## Brokers should be behind a service, if so set one entry in the hosts
  ## If your brokers are outside explicitly add them to the hosts. Note you only need one to bootstrap
  ## but you should specify more than one for resilience
  
  # kafka ssl
  # The keytab, key and truststores file data are the base64 encoded contents of the files. YOU MUST PROVIDE THE DATA BASE64 encoded
  # openssl base64 < client.keystore.jks | tr -d '\n'
  # The passwords will be base64enc by the secret
  # and added to the kafka secret and mounted into /mnt/secrets
  kafka:
    ssl:
      enabled: false
      # base64 encoded truststore data
      trustStoreFileData: |-
  
      # base64 encoded keystore data
      keyStoreFileData: |-

      # password strings
      trustStorePassword: 
      keyStorePassword: 
      keyPassword: 
    sasl:
      enabled: false
      # keyTabData is the base64 contents kerberos keytab file is using kerberos mounted in /mnt/secrets
      # openssl base64 < keytab | tr -d '\n'  
      keyTabData: |-
      
      # jaasFileData is the contents of the kafka jaas file mounted in /mnt/secrets
      jaasFileData: |-
      
      # mechanism is the sasl authentication mechanism GSSAPI, SCRAM or PLAIN
      mechanism: GSSAPI

      # krb5Conf is the kerberos config data to be mounted into /etc
      krb5Conf: |-
    bootstrapServers: 
      - name: kafka
        port: 9092
        sslPort: 9093
        saslSslPort: 9094
        saslPlainTextPort: 9095

  # zookeeper
  ## Zookeepers should be behind a service, if so set one entry in the hosts
  ## If your zookeepers are outside explicitly add them to the hosts. 
  zookeepers:
    chroot:
    hosts:
      - host: zookeeper
        port: 2181
        jmxPort: 9102
  #   - host: zookeeper2
  #     port: 2181
  #     jmxPort: 9102

  # schemaRegistries
  ## Schema registries should be behind a service, if so set one entry in the hosts
  ## If your schema registries are outside explicitly add them to the hosts.
  schemaRegistries:
    enabled: true
    authType:
    username:
    password:
    hosts:
      - host: schema-registry
        protocol: http
        port: 8081
        jmxPort: 9102     
  
  connectClusters:
    enabled: true
    clusters:
      - name: streamreactor
        port: 8083
        jmxPort: 9102
        protocol: http
        offsetsTopic: connect-offsets
        statusTopic: connect-status
        configTopic: connect-configs
        authType:
        username:
        password:
        hosts:
          - connect-worker-1
          - connect-worker-2
          - connect-worker-3
   
  # alertmanager
  alertManagers:
    enabled: false
    endpoints:
      - host: alertmanager
        protocol: http
        port: 9094
     
    sourceName: Lensesâ„¢-k8
    consumersLagThreshold: 50000

  #grafana
  grafanaUrl: 

  # slack
  slack:
    enabled: false
    iconUrl: https://www.landoop.com/images/landoop-dark.svg
    webhookUrl: ""
    username: Lenses
    channel: lenses
  
  # topics
  topics:
      # suffix to add to lenses system topics, for example if you are running more than one Lenses on the same kafka cluster
    suffix:

  # sql
  sql:
    processorImage: eu.gcr.io/lenses-container-registry/lenses-sql-processor
    processorImageTag: 2.2
    mode: IN_PROC
    heap: 1024M
    memLimit: 1152M
    memRequest: 128M
    # If Lenses is ssl or sasl Lenses will create a secret from the contents below and it will be mounted into the runners
    # This data is mounted into /mnt/secrets/processors for Lenses to read
    # trustStoreFileData and keyStoreFileData is the base64 encoded contents of the jks files
    # openssl base64 < client.keystore.jks | tr -d '\n'
    ssl:
      trustStoreFileData: |-

      keyStoreFileData: |-
      
      trustStorePassword:
      keyStorePassword:
      keyPassword:

    sasl:
      # keyTabData is the base64 contents kerberos keytab file is using kerberos mounted in /mnt/secrets/processors
      # openssl base64 < keytab | tr -d '\n'
      keyTabData: |-

      # jaasFileData is the contents of the kafka jaas file mounted in /mnt/secrets/processors
      jaasFileData: |-

      # mechanism is the sasl authentication mechanism GSSAPI, SCRAM or PLAIN
      mechanism: GSSAPI

      # krb5Conf is the kerberos config data to be mounted into /mnt/secrets/processors
      krb5Conf: |-

  security:
    # By default to BASIC security. Alternative is LDAP
    mode: BASIC
    kerberos:
      principal:
      keytabData: |-

      debug: false

    # user groups
    groups:
      - name: adminGroup
        roles:
          - admin
          - write
          - read
      - name: writeGroup
        roles:
          - read
          - write
      - name: readGroup
        roles:
          - read
    users:
     - username: admin
       password: admin
       displayname: LensesAdmin
       groups:
         - adminGroup
      #  topic:
      #    blacklist:
      #      - secrets_*
      #    whitelist:
      #      - position_reports.*

    #  - username: write
    #    password: write
    #    displayname: Writer
    #    groups:
    #      - writeGroup  

    #  - username: read
    #    password: read
    #    displayname: Reader
    #    groups:
    #      - readGroup               

    # service accounts
    #serviceAccounts:
    #  - username: jenkins
    #    token: jenkins
    #    groups:
    #      - adminGroup
    
     # ldap setting
    ldap:
      url: ""
      base: ""
      password: ""
      user: ""
      filter: ""

      # ldap plugins
      plugin:
        class: "com.landoop.lenses.security.ldap.LdapMemberOfUserGroupPlugin"
        memberofKey: ""
        groupExtractRegex: ""
        personNameKey: ""


  # license is the Lenses license
  license: |-
    
  # licenseUrl is a url pointing to the Lenses license
  licenseUrl:
  
  # extra configurations that will be append to the lenses.conf file mounted in /mnt/settings. 
  ## keys must be uppercase and underscores for separators suit for use as environment variables
  ## see http://lenses.stream/install_setup/configuration/lenses-config.html#option-reference
  configOverrides:
    #LENSES_PROPERTY : value
