apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: "lenses"
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        component: "lenses"
        hostPort: {{ .Values.restPort | quote }}
        containerPort: {{ .Values.restPort | quote }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9102"
        prometheus.io/path: "/metrics"
    spec:
      volumes:
        - name: lenses-secrets
          secret:
            secretName: {{ template "fullname" . }}
            defaultMode: 256
            items:
              - key: security
                path: security.conf
              - key: license 
                path: license.json   
        - name: lenses-settings
          configMap:
            name: {{ template "fullname" . }}
        {{- if or .Values.kafka.ssl.enabled .Values.kafka.sasl.enabled }}              
        - name: kafka-secrets
          secret:
            secretName: {{ template "fullname" . }}-kafka-secrets
            defaultMode: 256
            items:
              {{- if .Values.kafka.ssl.enabled }}
              - key: client.keystore.jks
                path: client.keystore.jks
              - key: client.truststore.jks 
                path: client.truststore.jks
              {{- end -}}  
              {{- if .Values.kafka.sasl.enabled }}
              - key: jaas.conf
                path: jass.conf
              - key: keytab
                path: keytab  
              {{- end -}}
        {{- end }}    
      serviceAccountName: {{ .Values.serviceAccount }}      
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.restPort }}
        livenessProbe:
          httpGet:
            path: /
            port: 3030
          initialDelaySeconds: 120
          periodSeconds: 3
        volumeMounts:
          - name: lenses-settings
            mountPath: "/mnt/settings"
          - name: lenses-secrets
            mountPath: "/mnt/secrets"
            readOnly: true 
          {{- if or .Values.kafka.ssl.enabled .Values.kafka.sasl.enabled }} 
          - name: kafka-secrets
            mountPath: "/mnt/secrets"
          {{- end }}      
        env:
        - name: LENSES_HEAP_OPTS
          value: {{- if .Values.kafka.sasl.enabled }} "-Djava.security.auth.login.config=/etc/mnt/secrets/jaas.conf " {{- end -}}{{ .Values.lenses.lensesJVMOpts | quote }} 
        
        # add sasl properties   
        {{- if .Values.kafka.sasl.enabled }}
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_SECURITY_PROTOCOL
          value: {{ .Values.kafka.secruityProtocol}} 
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_SECURITY_PROTOCOL
          value: {{ .Values.kafka.secruityProtocol}} 
        - name: LENSES_KAFKA_SETTINGS_KSTREAM_SECURITY_PROTOCOL
          value: {{ .Values.kafka.secruityProtocol}}                 
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_SASL_MECHANISM
          value: {{ .Values.kafka.sasl.mechanism}}    
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_SASL_MECHANISM
          value: {{ .Values.kafka.sasl.mechanism}}    
        {{- end -}}  

        # ssl properties   
        {{- if .Values.kafka.ssl.enabled }}
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_SECURITY_PROTOCOL
          value: {{ .Values.kafka.secruityProtocol}}
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_SSL_TRUSTSTORE_LOCATION
          value: "/mnt/secrets/client.truststore.jks"
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_SSL_KEYSTORE_LOCATION
          value: "/mnt/secrets/client.keystore.jks"
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}-kafka-secrets
              key:  "client.truststore.password"                  
        - name: LENSES_KAFKA_SETTINGS_CONSUMER_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}-kafka-secrets
              key:  "client.keystore.password"

        - name: LENSES_KAFKA_SETTINGS_PRODUCER_SECURITY_PROTOCOL
          value: {{ .Values.kafka.secruityProtocol}}
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_SSL_TRUSTSTORE_LOCATION
          value: "/mnt/secrets/client.truststore.jks"
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_SSL_KEYSTORE_LOCATION
          value: "/mnt/secrets/client.keystore.jks"
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}-kafka-secrets
              key:  "client.truststore.password"                  
        - name: LENSES_KAFKA_SETTINGS_PRODUCER_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}-kafka-secrets
              key:  "client.keystore.password"
                                        
        {{- end -}}

        resources:
{{ toYaml .Values.resources | indent 10 }}
