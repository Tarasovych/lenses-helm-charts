# Basic info
replicaCount: "__REQUIRED__"
secretsRef: "__REQUIRED__"
image:
  repository: registry.hub.docker.com/datamountaineer/kafka-connect-coap-sink
  tag: 0.3.0
  pullPolicy: IfNotPresent

# Resource management
resources:
  limits:
    memory: 512Mi
  requests:
    memory: 256Mi
javaHeap: 256M

# Monitoring
monitoring:
  pipeline: "__REQUIRED__"
  enabled: true
  port: 9102
  path: "/metrics"

# SSL/TLS options can be enabled, some connectors provide SSL support, others the newer TLS
# Set the corresponding value type to true. For SSL persistent volumes or hostPaths will be
# mounted under /connector-extra-config. Set the connectors ssl/tls option paths to be use this
# TLS is done via Secrets, create a secret for containing the certificates (base64 encoded) and
# create a secret for them, adding the name of the secret to the `secretsRef` other wise if using
# Eneco's Landscaper it will do this for you.

# SSL mount path on hosts, should be the base path of any ssl keystore/truststore paths
ssl:
  enabled: false
  # Path to the directory on the hosts
  path: /ssl

  # If persistent volumes should be used for ssl keystore/truststore paths
  persistentVolumes:
    enable: false
    existingClaim:

# TLS, for those connectors supporting TLS certificates rather than ssl key/truststores
# contents for mount take from config map
tls:
  enabled: false

## Avro schemas, for those connectors, MQTT and JMS source that support Avro converters we
## need the schemas, so we'll mount as a ConfigMap. Set the key value pairs, filename and data
## matching the value option avroSchema. Key is the file name, value is the avro schema contents
#avroSchemaFiles:
#  schema_file_name:  ""

applicationId: "__REQUIRED__"
topics: "__REQUIRED__"
tasksMax: 3


connectorClass: com.datamountaineer.streamreactor.connect.coap.sink.CoapSinkConnector
# maxRetries The maximum number of times to try the write again. type: INT importance: MEDIUM
maxRetries: 20

# publicKeyFile Path to the public key file for use in with PSK credentials type: STRING importance: LOW
publicKeyFile: 

# retryInterval The time in milliseconds between retries. type: INT importance: MEDIUM
retryInterval: 60000

# privateKeyFile 
#  Path to the private key file for use in with PSK credentials in PKCS8 rather than PKCS1
#  Use open SSL to convert.
# 
#  `openssl pkcs8 -in privatekey.pem -topk8 -nocrypt -out privatekey-pkcs8.pem`
# 
#  Only cipher suites TLS_PSK_WITH_AES_128_CCM_8 and TLS_PSK_WITH_AES_128_CBC_SHA256 are currently supported.
#      type: STRING importance: LOW
privateKeyFile: 

# batchSize The number of events to take from the internal queue to batch together to send to Kafka. The records willbe flushed if the linger period has expired first. type: INT importance: MEDIUM
batchSize: 100

# kcql The KCQL statement to select and route resources to topics. type: STRING importance: HIGH
kcql: "__REQUIRED__"

# password CoAP PSK secret. type: PASSWORD importance: LOW
password: "__REQUIRED__"

# enabled Enables the output for how many records have been processed type: BOOLEAN importance: MEDIUM
enabled: false

# truststorePath The path to the truststore. type: STRING importance: LOW
truststorePath: 

# port The port the DTLS connector will bind to on the Connector host. type: INT importance: LOW
port: 0

# lingerMs The number of milliseconds to wait before flushing the received messages to Kafka. The records willbe flushed if the batch size is reached before the linger period has expired. type: INT importance: MEDIUM
lingerMs: 5000

# errorPolicy 
# Specifies the action to be taken if an error occurs while inserting the data.
#  There are three available options:
#     NOOP - the error is swallowed
#     THROW - the error is allowed to propagate.
#     RETRY - The exception causes the Connect framework to retry the message. The number of retries is set by connect.cassandra.max.retries.
# All errors will be logged automatically, even if the code swallows them.
#      type: STRING importance: HIGH
errorPolicy: THROW

# keystorePath The path to the truststore. type: STRING importance: LOW
keystorePath: 

# certChainKey The key to use to get the certificate chain. type: STRING importance: LOW
certChainKey: client

# certs The password of the trust store. type: LIST importance: LOW
certs: 

# uri The COAP server to connect to. type: STRING importance: HIGH
uri: localhost

# username CoAP PSK identity. type: STRING importance: LOW
username: 

# keystorePass The password of the key store. type: PASSWORD importance: LOW
keystorePass: "__REQUIRED__"

# host The hostname the DTLS connector will bind to on the Connector host. type: STRING importance: LOW
host: localhost

# truststorePass The password of the trust store. type: PASSWORD importance: LOW
truststorePass: "__REQUIRED__"

topics: __REQUIRED__
