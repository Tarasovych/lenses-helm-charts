# Basic info
replicaCount: "__REQUIRED__"
secretsRef: "__REQUIRED__"
image:
  repository: registry.hub.docker.com/datamountaineer/kafka-connect-hazelcast-sink
  tag: 0.3.0.1
  pullPolicy: IfNotPresent

# Resource management
resources:
  limits:
    memory: 512Mi
  requests:
    memory: 256Mi
javaHeap: 256M

# Monitoring
monitoring:
  pipeline: "__REQUIRED__"
  enabled: true
  port: 9102
  path: "/metrics"

# SSL/TLS options can be enabled, some connectors provide SSL support, others the newer TLS
# Set the corresponding value type to true. For SSL persistent volumes or hostPaths will be
# mounted under /connector-extra-config. Set the connectors ssl/tls option paths to be use this
# TLS is done via Secrets, create a secret for containing the certificates (base64 encoded) and
# create a secret for them, adding the name of the secret to the `secretsRef` other wise if using
# Eneco's Landscaper it will do this for you.

# SSL mount path on hosts, should be the base path of any ssl keystore/truststore paths
ssl:
  enabled: false
  # Path to the directory on the hosts
  path: /ssl

  # If persistent volumes should be used for ssl keystore/truststore paths
  persistentVolumes:
    enable: false
    existingClaim:

# TLS, for those connectors supporting TLS certificates rather than ssl key/truststores
# contents for mount take from config map
tls:
  enabled: false

## Avro schemas, for those connectors, MQTT and JMS source that support Avro converters we
## need the schemas, so we'll mount as a ConfigMap. Set the key value pairs, filename and data
## matching the value option avroSchema. Key is the file name, value is the avro schema contents
#avroSchemaFiles:
#  schema_file_name:  ""

applicationId: "__REQUIRED__"
topics: "__REQUIRED__"
tasksMax: 3


connectorClass: com.datamountaineer.streamreactor.connect.hazelcast.sink.HazelCastSinkConnector
# lingerSeconds Enables/disables SO_LINGER with the specified linger time in seconds.
# The default value is 3. type: INT importance: LOW
lingerSeconds: 3

# clusterMembers 
# Address List is the initial list of cluster addresses to which the client will connect.
# The client uses this list to find an alive node. Although it may be enough to give only one
# address of a node in the cluster (since all nodes communicate with each other),
# it is recommended that you give the addresses for all the nodes. type: LIST importance: HIGH
clusterMembers: "__REQUIRED__"

# kcql connect.hazelcast.kcql type: STRING importance: HIGH
kcql: "__REQUIRED__"

# maxRetries The maximum number of times to try the write again. type: INT importance: MEDIUM
maxRetries: 20

# retryInterval The time in milliseconds between retries. type: INT importance: MEDIUM
retryInterval: 60000

# enabled Enables the output for how many records have been processed type: BOOLEAN importance: MEDIUM
enabled: false

# keepAlive Enables/disables the SO_KEEPALIVE socket option. The default value is true. type: BOOLEAN importance: LOW
keepAlive: true

# bufferSize Sets the SO_SNDBUF and SO_RCVBUF options to the specified value in KB for this Socket.
# The default value is 32. type: INT importance: LOW
bufferSize: 32

# timeout 
# Connection timeout is the timeout value in milliseconds for nodes to
# accept client connection requests. type: LONG importance: LOW
timeout: 5000

# tcpNoDelay Enables/disables the TCP_NODELAY socket option. The default value is true. type: BOOLEAN importance: LOW
tcpNoDelay: true

# retries Number of times a client will retry the connection at startup. type: INT importance: LOW
retries: 2

# threadpoolSize 
# The sink inserts all the data concurrently. To fail fast in case of an error, the sink has its own thread pool.
# Set the value to zero and the threadpool will default to 4* NO_OF_CPUs. Set a value greater than 0
# and that would be the size of this threadpool. type: INT importance: MEDIUM
threadpoolSize: 0

# parallelWrite All the sink to write in parallel the records received from Kafka on each poll. type: BOOLEAN importance: MEDIUM
parallelWrite: false

# groupPassword The password for the group name. type: PASSWORD importance: MEDIUM
groupPassword: "__REQUIRED__"

# errorPolicy Specifies the action to be taken if an error occurs while inserting the data.
# There are two available options:
# NOOP - the error is swallowed
# THROW - the error is allowed to propagate.
# RETRY - The exception causes the Connect framework to retry the message. The number of retries is based on
# The error will be logged automatically type: STRING importance: HIGH
errorPolicy: THROW

# groupName The group name of the connector in the target Hazelcast cluster. type: STRING importance: HIGH
groupName: "__REQUIRED__"

# reuseAddress Enables/disables the SO_REUSEADDR socket option. The default value is true. type: BOOLEAN importance: LOW
reuseAddress: true

topics: __REQUIRED__
